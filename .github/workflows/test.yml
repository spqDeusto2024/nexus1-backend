name: CI - Integration Test

on:
  push:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ "3.10"]

    steps:
      # Checkout el código
      - name: Git checkout
        uses: actions/checkout@v2

      # Construcción de la imagen Docker
      - name: Build Docker container
        run: bash build.sh

      # Levantar los servicios con docker-compose
      - name: Start docker-compose 
        run: docker compose up -d

      # Esperar a que los servicios estén disponibles
      - name: Wait for services to be up
        run: |
          sleep 10
          docker compose ps

      # # Verificar que la base de datos está accesible (ejemplo usando PostgreSQL)
      # - name: Check database is up
      #   run: |
      #     docker exec -i mysql_nexus1 mysql -root -root -e "SHOW DATABASES;"

      # Verificar que FastAPI está accesible
      - name: Check FastAPI is up
        run: |
          curl -f http://localhost:8000/docs || exit 1

      # Instalar dependencias para pruebas
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install --no-cache-dir --upgrade -r requirements.txt

      # Ejecutar pruebas unitarias
      - name: Run tests inside Docker container
        run: |
          # Reemplaza 'app' por el nombre del servicio donde quieres correr las pruebas
          docker exec fastapi-nexus1 pytest /code/test

     # Limpiar los contenedores, volúmenes, imágenes y builds creados durante las pruebas
      - name: Cleanup Docker (containers, volumes, images)
        run: |
          # Detener y eliminar los contenedores creados
          docker compose down --volumes --remove-orphans

          # Eliminar las imágenes construidas durante las pruebas
          docker rmi $(docker images -q --filter "dangling=true")

          # Eliminar cualquier build intermedio o contenedor no usado
          docker system prune -f --volumes --all
